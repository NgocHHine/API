const TaiKhoan = require('../models/TaiKhoan');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
// const nodemailer = require('nodemailer');
const nodemailer = require("nodemailer");
require('dotenv').config();

// ƒêƒÉng nh·∫≠p t√†i kho·∫£n
const login = async (req, res) => {
    try {
      const { TenDN, Matkhau } = req.body;
  
      // Ki·ªÉm tra t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng
      const user = await TaiKhoan.findOne({ TenDN });
      if (!user) return res.status(400).json({ message: "T√™n ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i!" });
  
      // Ki·ªÉm tra m·∫≠t kh·∫©u
      const isMatch = await bcrypt.compare(Matkhau, user.Matkhau);
      if (!isMatch) return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!" });
  
      // T·∫°o JWT Token
      const token = jwt.sign({ id: user._id, role: user.QuyenTK }, process.env.JWT_SECRET, { expiresIn: "1h" });
  
      res.json({
        message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
        token,
        user: { TenDN: user.TenDN, QuyenTK: user.QuyenTK }
      });
    } catch (error) {
      res.status(500).json({ message: "L·ªói server!", error });
    }
  };
  // ƒê·∫£m b·∫£o export ƒë√∫ng
module.exports = { login };


// Kh·ªüi t·∫°o transporter ƒë·ªÉ g·ª≠i email
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    }
});

// üìå API: G·ª≠i email qu√™n m·∫≠t kh·∫©u
const forgotPassword = async (req, res) => {
    try {
        const { Email } = req.body;

        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
        const user = await TaiKhoan.findOne({ Email });
        if (!user) return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });

        // T·∫°o token reset password (h·∫øt h·∫°n sau 15 ph√∫t)
        const resetToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "15m" });

        // G·ª≠i email ch·ª©a link reset password
        const resetLink = `${process.env.BASE_URL}/reset-password/${resetToken}`;
        await transporter.sendMail({
            from: process.env.EMAIL_USER,
            to: Email,
            subject: "Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
            html: `<p>Nh·∫•n v√†o link sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p> 
                   <a href="${resetLink}">${resetLink}</a> 
                   <p>Link n√†y c√≥ hi·ªáu l·ª±c trong 15 ph√∫t.</p>`,
        });

        res.json({ message: "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå API: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi
const resetPassword = async (req, res) => {
    try {
        const { token, newPassword } = req.body;
        console.log("Received Token:", token);

        // X√°c th·ª±c token
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("Decoded Token:", decoded);

          // Ki·ªÉm tra user t·ªìn t·∫°i hay kh√¥ng
          const user = await TaiKhoan.findById(decoded.id);
          if (!user) {
              return res.status(400).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
          }

        // Hash m·∫≠t kh·∫©u m·ªõi
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi v√†o DB
        await TaiKhoan.findByIdAndUpdate(decoded.id, { Matkhau: hashedPassword });

        res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
    } catch (error) {
        res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
    }
};


// H√†m g·ª≠i email
const sendVerificationEmail = async (email, token) => {
    try {
        const verificationLink = `${process.env.BASE_URL}/api/auth/verify/${token}`;
        
        await transporter.sendMail({
            from: process.env.EMAIL_USER,
            to: email,
            subject: "X√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n",
            html: `<p>Nh·∫•n v√†o ƒë∆∞·ªùng link sau ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n c·ªßa b·∫°n:</p>
                   <a href="${verificationLink}">${verificationLink}</a>`
        });

        console.log("üì© Email ƒë√£ g·ª≠i th√†nh c√¥ng!");
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i email:", error);
    }
};


// ƒêƒÉng k√Ω t√†i kho·∫£n
const registerController = async (req, res) => {
    try {
        const { TenDN, Sdt, Email, Matkhau, Gioitinh } = req.body;

        // Ki·ªÉm tra email ho·∫∑c username ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await TaiKhoan.findOne({ $or: [{ Email }, { TenDN }] });
        if (existingUser) {
            return res.status(400).json({ message: 'Email ho·∫∑c T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i' });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(Matkhau, 10);

        // T·∫°o t√†i kho·∫£n m·ªõi
        const newUser = new TaiKhoan({
            TenDN,
            Sdt,
            Email,
            Matkhau: hashedPassword,
            Gioitinh
        });

        await newUser.save();

        // T·∫°o token x√°c nh·∫≠n email
       const verificationToken = jwt.sign({ Email }, process.env.SECRET_KEY, { expiresIn: '1h' });
        console.log("1");
        // G·ª≠i email x√°c nh·∫≠n
        await sendVerificationEmail(Email, verificationToken);
        console.log("2");
        res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n.' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
};

// X√°c nh·∫≠n t√†i kho·∫£n qua email
const verifyEmailController = async (req, res) => {
    try {
        const { token } = req.params;
        const decoded = jwt.verify(token, process.env.SECRET_KEY);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c minh
        await TaiKhoan.findOneAndUpdate({ Email: decoded.Email }, { isVerified: true });

        res.json({ message: 'X√°c nh·∫≠n t√†i kho·∫£n th√†nh c√¥ng!' });
    } catch (error) {
        res.status(400).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.' });
    }
};
const SECRET_KEY = process.env.SECRET_KEY || "mysecretkey";

exports.sendVerificationEmail = async (req, res) => {
    try {
        const { email } = req.body;

        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
        }

        // T·∫°o token x√°c th·ª±c (c√≥ hi·ªáu l·ª±c 15 ph√∫t)
        const token = jwt.sign({ userId: user._id }, SECRET_KEY, { expiresIn: "15m" });

        // G·ª≠i email ch·ª©a token
        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS,
            },
        });

        const mailOptions = {
            from: process.env.EMAIL_USER,
            to: email,
            subject: "X√°c th·ª±c t√†i kho·∫£n",
            text: `Nh·∫•p v√†o link sau ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n: http://localhost:3000/verify-email?token=${token}`
        };

        await transporter.sendMail(mailOptions);

        res.json({ message: "Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i!" });

    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};
exports.verifyAndSetNewPassword = async (req, res) => {
    try {
        const { token, newPassword } = req.body;

        // Ki·ªÉm tra token h·ª£p l·ªá
        const decoded = jwt.verify(token, SECRET_KEY);
        const user = await User.findById(decoded.userId);

        if (!user) {
            return res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        user.password = hashedPassword;
        await user.save();

        res.json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!" });

    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};


module.exports = {login, registerController, verifyEmailController, forgotPassword, resetPassword,sendVerificationEmail};

